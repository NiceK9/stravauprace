<?phpinclude_once 'StravaApiExt.php';define ("SUBSCRIPTION_URL", 'https://api.strava.com/api/v3/push_subscriptions');define ("SUBSCRIPTION_CLIENT_ID_KEY", 'client_id');define ("SUBSCRIPTION_CLIENT_ID", '26496');define ("SUBSCRIPTION_CLIENT_SECRET_KEY", 'client_secret');define ("SUBSCRIPTION_CLIENT_SECRET", '06db3de6b974347549b2d27e3c4794dd05e3f811');define ("SUBSCRIPTION_CALLBACK_URL_KEY", 'callback_url');define ("SUBSCRIPTION_CALLBACK_URL", 'http://8f31da0e.ngrok.io/stravauprace/validate.php');define ("SUBSCRIPTION_VERIFY_TOKEN_KEY", 'verify_token');define ("SUBSCRIPTION_VERIFY_TOKEN", 'STRAVA');define ("TIME_FORMAT", 'Y-m-d H:i:s');use App\Services\StravaApi;function getURLQuery(){	return sprintf("%s?%s=%s&%s=%s", SUBSCRIPTION_URL, SUBSCRIPTION_CLIENT_ID_KEY, SUBSCRIPTION_CLIENT_ID, SUBSCRIPTION_CLIENT_SECRET_KEY, SUBSCRIPTION_CLIENT_SECRET);}function getURLQuerySubID($id){	return sprintf("%s/%s?%s=%s&%s=%s", SUBSCRIPTION_URL, $id, SUBSCRIPTION_CLIENT_ID_KEY, SUBSCRIPTION_CLIENT_ID, SUBSCRIPTION_CLIENT_SECRET_KEY, SUBSCRIPTION_CLIENT_SECRET);}function checkSubscription(){	$url = getURLQuery();	$result = file_get_contents($url);	if ($result === FALSE) { /* Handle error */ }	$arr = json_decode($result);	if(sizeof($arr) > 0)	{			return $arr[0];	}else	{		return null;	}}function deleteSubscription($id){	$url = getURLQuerySubID($id);	$data = array();	// use key 'http' even if you send the request to https://...	$options = array(		'http' => array(			'header'  => "Content-type: application/x-www-form-urlencoded\r\n",			'method'  => 'DELETE',			'content' => http_build_query($data)		)	);	$context  = stream_context_create($options);	$result = file_get_contents($url, false, $context);	if ($result === FALSE) { 	/* Handle error */ 		return false;	}else{		return true;	}}function registerSubscription(){	$url = getURLQuery();	$data = array(		SUBSCRIPTION_CALLBACK_URL_KEY => SUBSCRIPTION_CALLBACK_URL, 		SUBSCRIPTION_VERIFY_TOKEN_KEY => SUBSCRIPTION_VERIFY_TOKEN);	// use key 'http' even if you send the request to https://...	$options = array(		'http' => array(			'header'  => "Content-type: application/x-www-form-urlencoded\r\n",			'method'  => 'POST',			'content' => http_build_query($data)		)	);	$context  = stream_context_create($options);	$result = file_get_contents($url, false, $context);	if ($result === FALSE) { 	/* Handle error */ 		return false;	}else{		return true;	}}	function fetchActivity($activity_id, $user_token){	try{	$api = new StravaApi(		SUBSCRIPTION_CLIENT_SECRET_KEY,		SUBSCRIPTION_CLIENT_SECRET	);	$api->setAccessToken($user_token);	return $api->get('activities', [		'id'			 => $activity_id,		'include_all_efforts' => false	]);	} catch(\Exception $e) {	return array(		'error' => array(		'code' 		=> $e->getCode(),		'message' 	=> $e->getMessage()		)	);	}}	function speed_SecondsPerKm($speed){	if($speed == 0)		return 0;	return floor(1000 / $speed);}	function secondToStr($seconds){	$surplus = $seconds % 60;	$remain = $seconds - $surplus;	return $remain / 60 . ":" . ($surplus<10?("0".$surplus) : $surplus);}function convertSpeedToPace($speed){	$secondsPerKm = speed_SecondsPerKm($speed);	return secondToStr($secondsPerKm);}function var_dump_ret($n){	ob_start();	var_dump($n);	return ob_get_clean();}?>